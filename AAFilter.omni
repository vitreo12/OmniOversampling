use LowPassBiquad

struct AAFilter:
    n int
    filters Data[LowPassBiquad]
    Qs Data[float]

def calculateButterQs(order):
    lim = int(order / 2)
    Qs = Data(lim)
    ic = lim - 1;
    for k in 1..lim:
        b = -2.0 * cos((2.0 * k + order - 1) * PI / (2.0 * order))
        Qs[ic] = 1.0 / b
        ic = ic - 1
    return Qs
    
def newAAFilter(n):
    filters = Data[LowPassBiquad](n)
    for filter in filters: 
        filter = newLowPassBiquad()
    Qs = calculateButterQs(2 * n)
    return AAFilter(n, filters, Qs)

def reset(aaFilter AAFilter, osRatio int):
    fc = 0.98 * (samplerate / 2.0)
    for i in 0..<aaFilter.n:
        aaFilter.filters[i].reset()
        aaFilter.filters[i].setParameters(fc / (osRatio * samplerate), aaFilter.Qs[i])

def process(aaFilter AAFilter, x):
    val = x
    for i in 0..<aaFilter.n:
        val = aaFilter.filters[i].process(val)
    return val
